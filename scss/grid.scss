@import "_variables";






//mixins
@mixin make-grid-columns($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
	// Common properties for all breakpoints
	%grid-column {
		position: relative;
		width: 100%;
		min-height: 1px; // Prevent columns from collapsing when empty
		@include make-grid-gutter-width(2, true);
	}

	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-postfix($breakpoint, $breakpoints);

		// Allow columns to stretch full width below their breakpoints
		@for $i from 1 through $columns {
			.col#{$infix}-#{$i} {
				@extend %grid-column;
			}
		}
		.col#{$infix},
		.col#{$infix}-auto {
			@extend %grid-column;
		}

		@include respond-up($breakpoint, $breakpoints) {
		// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			.col#{$infix} {
				flex-basis: 0;
				flex-grow: 1;
				max-width: 100%;
			}
			.col#{$infix}-auto {
				flex: 0 0 auto;
				width: auto;
				max-width: none; // Reset earlier grid tiers
			}

			@for $i from 1 through $columns {
				.col#{$infix}-#{$i} {
					@include make-col($i, $columns);
				}
			}

			.order#{$infix}-first { order: -1; }

			.order#{$infix}-last { order: $columns + 1; }

			@for $i from 0 through $columns {
				.order#{$infix}-#{$i} { order: $i; }
			}

			// `$columns - 1` because offsetting by the width of an entire row isn't possible
			@for $i from 0 through ($columns - 1) {
				@if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
					.offset#{$infix}-#{$i} {
						@include make-col-offset($i, $columns);
					}
				}
			}
		}
	}
}
/// Grid system
//
// Generate semantic grid columns with these mixins.
@mixin make-container() {
	width: 100%;
	margin-right: auto;
	margin-left: auto;
	@include make-grid-gutter-width(2, true);
}
  
  
// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include respond-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

//создаем кастомные gutters
//1 аргумент на что делим
//2 аргумент isPadding (если true padding / false margin)
@mixin make-grid-gutter-width($divider, $isPadding) {
	@each $breakpoint, $current-width in $grid-gutter-width {
		@include respond-up($breakpoint, $grid-breakpoints) {
			@if $isPadding{
				padding-right: ($current-width / $divider);
				padding-left: ($current-width / $divider);
			} @else {
				margin-right: ($current-width / $divider);
				margin-left: ($current-width / $divider);
			}
		}
	}
}

@mixin make-row() {
	display: flex;
	flex-wrap: wrap;
	@include make-grid-gutter-width(-2, false);
}
  
@mixin make-col-ready() {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	min-height: 1px; // Prevent collapsing
	@include make-grid-gutter-width(2, true);
}
  
@mixin make-col($size, $columns: $grid-columns) {
	flex: 0 0 percentage($size / $columns);
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: percentage($size / $columns);
}
  
@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: $size / $columns;
	margin-left: if($num == 0, 0, percentage($num));
}
.container-fluid {
    @include make-container();
}

.container {
	@include make-container();
	@include make-container-max-widths();
}
.row {
	@include make-row();
}


// Remove the negative margin from default .row, then the horizontal padding
// from all immediate children columns (to prevent runaway style inheritance).
.no-gutters {
	margin-right: 0;
	margin-left: 0;

	> .col,
	> [class*="col-"] {
		padding-right: 0;
		padding-left: 0;
	}
}

// Columns
//
// Common styles for small and large grid columns
@include make-grid-columns();